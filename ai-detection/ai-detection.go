package aidetection

import (
	"context"
	"encoding/json"
	"fmt"
	"psr/types/aidetection"
	"strings"

	"github.com/sashabaranov/go-openai"
)

func DetectAIContent(personalStatement string) (aidetection.AIDetectionResult, error) {
	client := openai.NewClient("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")

	sections := strings.Split(personalStatement, "\n\n")

	var flaggedSections []aidetection.FlaggedSection
	var totalProbability float64

	for _, section := range sections {
		prompt := fmt.Sprintf(`Analyze the following text and determine the likelihood it was generated by AI. 
		Provide a probability score (0-100) and a brief explanation for your assessment.
		Text: "%s"
		
		Respond in the following JSON format:
		{
			"probability": <score>,
			"reason": "<explanation>"
		}`, section)

		resp, err := client.CreateChatCompletion(
			context.Background(),
			openai.ChatCompletionRequest{
				Model: openai.GPT3Dot5Turbo,
				Messages: []openai.ChatCompletionMessage{
					{
						Role:    openai.ChatMessageRoleUser,
						Content: prompt,
					},
				},
			},
		)

		if err != nil {
			return aidetection.AIDetectionResult{}, fmt.Errorf("OpenAI API error: %v", err)
		}

		var result struct {
			Probability float64 `json:"probability"`
			Reason      string  `json:"reason"`
		}

		err = json.Unmarshal([]byte(resp.Choices[0].Message.Content), &result)
		if err != nil {
			return aidetection.AIDetectionResult{}, fmt.Errorf("Error parsing JSON response: %v", err)
		}

		totalProbability += result.Probability

		if result.Probability > 50 {
			flaggedSections = append(flaggedSections, aidetection.FlaggedSection{
				Text:        section,
				Reason:      result.Reason,
				Probability: result.Probability,
			})
		}
	}

	overallProbability := totalProbability / float64(len(sections))

	detectionResult := aidetection.AIDetectionResult{
		OverallAIProbability: overallProbability,
		FlaggedSections:      flaggedSections,
	}

	return detectionResult, nil
}
